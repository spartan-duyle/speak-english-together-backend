datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
 
generator client {
  provider = "prisma-client-js"
}model Collection {
  id Int @id @default(autoincrement())
  name String
  description String?
  vocabularies  Vocabulary[]
  user_id        Int
  user          User @relation(fields: [user_id], references: [id])
  image_url String?
  created_at DateTime @default(now())
  updated_at DateTime?
  deleted_at DateTime?
  @@unique([name, user_id, deleted_at])
}model Follower {
  id Int @id @default(autoincrement())
  followed_id Int
  follower_id Int
  created_at DateTime @default(now())
  updated_at DateTime?
  deleted_at DateTime?
  followed User @relation("Followed", fields: [followed_id], references: [id])
  follower User @relation("Follower", fields: [follower_id], references: [id])
}model Paragraph {
  id                      Int       @id @default(autoincrement())
  user                    User      @relation(fields: [user_id], references: [id])
  user_id                 Int
  name                    String
  question                String?
  suggestion_answers          String[]
  original_text           String
  audio_url              String?
  updated_text            String?
  translated_updated_text String?
  overall_comment         String?
  relevance_to_question   String?
  suggestion_improvements    String[]
  level                   String?
  topic_name                String?
  created_at              DateTime @default(now())
  updated_at              DateTime?
  deleted_at              DateTime?

  // Define the foreign key constraint
  @@index([user_id], name: "user_id")
}model RoomMember {
  id Int @id @default(autoincrement())
  room_id Int
  user_id Int
  is_host Boolean @default(false)
  last_joined_at DateTime @default(now())
  left_at DateTime?
  avatar_url String?
  full_name String
  is_muted Boolean @default(false)
  created_at DateTime @default(now())
  updated_at DateTime?
  deleted_at DateTime?
  room Room @relation(fields: [room_id], references: [id])
  user User @relation(fields: [user_id], references: [id])
}model Room {
  id                    Int      @id @default(autoincrement())
  name                  String   
  host_user_id          Int
  topic                 Topic        @relation(fields: [topic_id], references: [id])
  topic_id              Int
  is_private            Boolean      @default(false)
  password              String?
  description           String?
  thumbnail             String?
  max_member_amount     Int?
  current_member_amount Int @default(1)
  ended_at              DateTime?
  created_at            DateTime @default(now())
  updated_at            DateTime?
  deleted_at            DateTime?
  room_members          RoomMember[]
  video_sdk_room_id     String? @unique
  level                 String?
}
model Topic {
  id Int @id @default(autoincrement())
  name String @unique
  rooms Room[]
  image String?
  content String?
  created_at DateTime @default(now())
  updated_at DateTime?
  deleted_at DateTime?
}model User {
  id            Int      @id @default(autoincrement())
  email         String   @unique
  password      String
  full_name     String
  level         String   @default("BEGINNER")
  role          String   @default("USER")
  description   String?
  avatar_url    String?
  nationality   String?
  status        String   @default("UNVERIFIED")
  created_at    DateTime @default(now())
  updated_at    DateTime?
  deleted_at    DateTime?
  room_member   RoomMember[]
  followers Follower[] @relation("Followed")
  following Follower[] @relation("Follower")
  vocabularies Vocabulary[]
  vocabulary_topics Collection[]
  paragraphs Paragraph[]
  birthday DateTime?
  native_language String?
  interests String[]
  learning_goals String[]
  occupation String?
  comet_chat_uid String?
}
model Vocabulary {
  id                  Int      @id @default(autoincrement())
  word                String
  word_audio_url      String?
  meaning             String
  meaning_audio_url   String?
  examples            Json[]
  context             String?
  created_at          DateTime @default(now())
  updated_at          DateTime?
  deleted_at          DateTime?
  // Define a many-to-one relationship with User
  user                User     @relation(fields: [user_id], references: [id])
  user_id             Int

  collection_id Int
  collection  Collection @relation(fields: [collection_id], references: [id])
  @@index([collection_id])
}